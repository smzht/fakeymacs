#+STARTUP: showall indent

* Fakeymacs

Fakeymacs は、Windows の操作を Emacs のキーバインドで行えるようにするための
Keyhac の設定です。

Keyhac for Windows v1.82 以上のバージョンでご利用ください（最新版は v1.83 です）。

- https://sites.google.com/site/craftware/keyhac-ja

manual は次のリンクを参照してください。

1. [[fakeymacs_manuals/configuration_parameters.org][Configuration parameters]]
1. [[fakeymacs_manuals/key_bindings.org][Key bindings]]
1. [[fakeymacs_manuals/extensions.org][Extensions]]
1. [[fakeymacs_manuals/functions.org][Functions]]

次のページにも関連の情報があります。

- [[https://www49.atwiki.jp/ntemacs/pages/25.html][Windows の操作を Emacs のキーバインドで行うための設定 （Keyhac版）]]

** 本設定のキーバインドがサポートする機能

本設定のキーバインドでは、次の機能をサポートしています。

- Emacs 標準キーバインド
- Emacs 日本語入力モード [1]
- other_window（一番最近までフォーカスがあったウィンドウに移動する機能）
- shell_command（コマンドコンソールを起動する機能）
- クリップボードリスト
- ランチャーリスト
- 拡張機能（Extensions）で実現している機能

また、関連して次の機能もサポートしています。

- 日本語キーボード設定されている OS で英語キーボードを使うための機能
- IME の状態をテキスト カーソル インジケーターの色で表現する機能

[1] IME が ON の時に文字（英数字か、スペースを除く特殊文字）を入力すると起動するモードです。
（モードに入ると、▲のマークが表示されます。） Emacs 日本語入力モードになると Emacs キーバインド
として利用できるキーが限定され、その他のキーは Windows にそのまま渡されるようになるため、
IME のショートカットキーが利用できるようになります。
また、このモードでは IME のショートカットキーを置き換える機能もサポートしており、初期値では
「ことえり」のキーバインドを利用できるようにしています。
詳しくは、次のページの「■ 「Emacs 日本語入力モード」のキーバインド」の項を参照してください。

- [[/fakeymacs_manuals/key_bindings.org#-emacs-日本語入力モードのキーバインド]]

** キーマップのレイヤー構成

本設定で利用している主なキーマップのレイヤー構成は次の図のとおりです。
入力したキーはキーマップの上位のレイヤーからサーチされ、キーがマッチすれば、そのキーに
定義されたコマンドを実行し、サーチを終了します。

[[/fakeymacs_manuals/keymap_layer/keymap_layer.png]]

※ keymap_remote レイヤーは、capslock_key Extension を有効にしたときに機能するレイヤーです。

※ keymap_vscode レイヤーは、vscode_key Extension を有効にしたときに機能するレイヤーです。

※ keymap_obsidian レイヤーは、obsidian_key Extension を有効にしたときに機能するレイヤーです。

※ keymap_ei レイヤーは、fc.use_emacs_ime_mode 変数が True の時に機能するレイヤーです。

** 使い方

*** 1) キーボード配列の調整を行う

A キーの左横が CapsLock のキーボードを使っている場合は、右 Ctrl キーに置き換えることを
お勧めします。

CapsLock のキーの置き換えは、キーボードの機能で行うか、レジストリによるキーの置き換え
（管理者権限が必要）で対応してください。

レジストリによるキーの置き換えには、KeySwap というツールがお勧めです。次のページが参考
となります。レジストリの設定後は、Windows の再サインインをしてください。

- http://pasokatu.com/8460

上記で対応できない場合は、次の２つの方法をお試しください。

**** a) 「英語用キーボードドライバ置換」を利用する

英語キーボード配列を利用しているユーザにお勧めの方法です。次のレジストリ設定ファイル
を実行（管理者権限不要）し、Windows に再サインインをすることで利用可能となります。

- [[/fakeymacs_tools/Substitutes-00000411.reg]]

詳しくは、次の Issue を参照してください。

- https://github.com/smzht/fakeymacs/issues/55

**** b) Fakeymacs の capslock_key 拡張機能を利用する

日本語キーボード配列を利用しているユーザが選択できる方法です。

詳しくは、以降にある「CapsLock キーを Ctrl キーとして使う機能について」の項を参照してください。
こちらは、かなりトリッキーな方法で実現しており、いくつかの制約事項があります。
次善の策（最後の手段？）として利用を検討してください。

*** 2) IMEを切り替えるショートカットキーを無効化する

Alt+Shift や Ctrl+Shift のキー操作により IME の切り替えが行われる場合には、
次のページの内容を参照し、それらのキー（ショートカットキー）の無効化を行ってください。

- (Windows 10) https://jill-tone.com/win10ime_ctrlshift_invalidation/
- (Windows 11) https://softantenna.com/blog/windows-11-disable-ime-change-shortcuts/

※ この無効化の設定を行わないと、リージョンの選択が正しく機能しません。

*** 3) Keyhac をインストールする

次のサイトから Keyhac をインストールしてください。

- https://sites.google.com/site/craftware/keyhac-ja

起動時に dll load エラーが発生する場合は、「Microsoft Visual C++ 再頒布可能パッケージ」を
インストールする必要があります。
次のサイトから最新の「Visual Studio 2015、2017、2019、および2022の Microsoft Visual C++
再頒布可能パッケージ」をダウンロードし、インストールしてください。

- https://docs.microsoft.com/ja-JP/cpp/windows/latest-supported-vc-redist?view=msvc-170

※ Keyhac for Windows v1.82（旧版）を利用する場合は、x86版 をインストールする必要があります。
Keyhac for Windows v1.83（最新版）を利用する場合は、x64版 をインストールする必要があると
思われます（未確認）。

*** 4) Fakeymacs をダウンロードする

本サイトの Code のボタン（緑色のボタン）から、Download ZIP を選択し、Fakeymacs 一式を
ダウンロードしてください。（可能であれば、Git を使ってダウンロードすることをお勧めします。
Git を使うと、今後の Fakeymacs のバージョンアップに容易に対応できます。）

*** 5) 必要なファイルを Keyhac のフォルダに複写する

ダウンロードした Fakeymacs の ZIPファイルから、必要なファイルを Keyhac のフォルダに複写
します。次の中から必要なファイルを複写してください。（フォルダ配下にあるファイルは、
フォルダ階層を維持して複写するようにしてください。）

|------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Filename               | Description                                                                                                                                                                                                                  |
|------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| keyhac.bat             | keyhac.exe をプロセス優先度「HIGH」で起動するためのバッチファイルです。                                                                                                                                                      |
| config.py              | Fakeymacs の本体です。このファイルは必ず必要です。                                                                                                                                                                           |
| _config_personal.py    | fakeymacs で利用頻度が高いと思われるコンフィグレーションパラメータをまとめた個人設定ファイルです。config_personal.py という名称に変更することで機能するようになります。                                                      |
| _config_parameter.py   | fakeymacs で設定可能な全てのコンフィグレーションパラメータをまとめたファイルです。config_personal.py 作成時の参考用として作成したものですが、config_personal.py に名称変更して個人設定ファイルとして利用することもできます。 |
| fakeymacs_extensions/* | 機能拡張ファイルです。config_personal.py の中で有効／無効を切り替えることができます。                                                                                                                                        |
|------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

*** 6) コンフィグレーションパラメータをカスタマイズする

_config_personal.py ファイルを config_personal.pyという名称に変更し、変更したいコンフィグレーション
パラメータをカスタマイズします。

次は、修正する必要性が高いと思われるコンフィグレーションパラメータです。

|----------------------------+------------------------------------------------------------------------------------------------------------------------------------|
| Configuration Parameter    | Description                                                                                                                        |
|----------------------------+------------------------------------------------------------------------------------------------------------------------------------|
| fc.ime                     | 利用している IME を指定する                                                                                                        |
| fc.transparent_target      | すべてのキーマップを透過するアプリケーションソフトのプロセス名称を指定する                                                         |
| fc.not_emacs_target        | Emacs のキーバインドに“したくない”アプリケーションソフトを指定する                                                               |
| fc.ime_target              | IME の切り替え“のみをしたい”アプリケーションソフトを指定する                                                                     |
| fc.side_of_ctrl_key        | 左右どちらの Ctrl キーを使うかを指定する                                                                                           |
| fc.use_esc_as_meta         | Esc キーを Meta キーとして使うかどうかを指定する                                                                                   |
| fc.use_emacs_ime_mode      | Emacs 日本語入力モードを使うかどうかを指定する                                                                                     |
| fc.toggle_input_method_key | IME をトグルで切り替えるキーを指定する                                                                                             |
| fc.set_input_method_key    | IME を切り替えるキーの組み合わせ（disable、enable の順）を指定する                                                                 |
| fc.game_app_list           | ゲームなど、キーバインドの設定を極力行いたくないアプリケーションソフトを指定する                                                   |
| fc.name_change_app_list    | ウィンドウのタイトルが変わった時にキーバインドの再設定を行うアプリケーションソフトのプロセス名称（ワイルドカード指定可）を指定する |
|----------------------------+------------------------------------------------------------------------------------------------------------------------------------|

※ 1) で CapsLock に右 Ctrl キーを割り当てた場合には、fc.side_of_ctrl_key 変数を "R" に
変更する必要があります。この場合、左 Ctrl キーは従来どおり Windows ショートカット用のキー
として利用できます。

※ 1) の a) または b) の方法を採用する場合には、fc.side_of_ctrl_key 変数に設定した側の Ctrl
キーが CapsLock キーに設定されます。この場合も、上記の理由から、fc.side_of_ctrl_key 変数に
"R" を設定することをお勧めします。

※ コンフィグレーションパラメータの設定例にある次の行を有効にすると、alt-ime-ahk と同等の機能が
働くようになります。

#+BEGIN_EXAMPLE
# fc.set_input_method_key += [["O-LAlt", "O-RAlt"]]
#+END_EXAMPLE

※ ウィンドウのタイトルが変わった時にキーバインドの再設定を行うには、fc.name_change_app_list
変数に対象とするアプリケーションソフトを指定しておく必要があります。
初期設定では、ブラウザやターミナルソフトを指定しています。
ブラウザでは、さくらクラウドシェル や VS Code Web の利用を想定しているため、ターミナルソフトでは、
以降で説明する Microsoft Edit や Midnight Commander の利用を想定しているためです。
必要なアプリケーションソフトがあれば、追加設定を行ってください。

*** 7) 拡張機能の設定を行う

config_personal.py には、Fakeymacs の拡張機能を有効化／無効化するための設定も含まれています。

次のページを参照して、使いたい拡張機能があればその設定を行ってください。
（拡張機能を有効化する場合には、if 0: を if 1: に変更してください。
また、必要であれば、コンフィグレーションパラメータの設定も行ってください。）

- [[/fakeymacs_manuals/extensions.org]]

*** 8) 日本語キーボードの設定がされている OS で英語キーボードを使えるようにする設定を行う（オプション）

Fakeymacs は、日本語キーボードの設定がされている OS で英語キーボードを使えるようにする機能
（ULE4JIS と同等の機能）を有しています。
英語キーボードを接続していなくても、日本語キーボードを英語配列キーボードとして使うこともできます。
（<変換>、<無変換> キーが使える英語配列キーボードとして使えます。）
A-l で開くランチャーメニューの Other メニュー（C-f で移動して一番最後にあるメニュー）で、
キーボードレイアウトの切り替えが可能です。

この機能を利用して、Keyhac 起動時すぐにキーボードを英語配列で使いたい場合には、
fc.use_usjis_keyboard_conversion 変数を True に設定してください。

また、英語配列で日本語キーボードを利用する場合には、次の拡張機能を有効にすることで、
<］> キーを Enter キーとして、 <＼> キーを Shift キーとして利用することができるようになります。
英語配列では使わないキーを英語キーボードのキー配置にあるキーに再割当てすることで、
日本語キーボードを英語キーボードのキー配置により近い形で利用することが可能となります。

- [[/fakeymacs_extensions/change_keyboard2]]

*** 9) テキスト カーソル インジケーターの設定を行う（オプション）

IME の状態をテキスト カーソル インジケーターの色で表現する機能を利用する場合、次のページを参考とし、
テキスト カーソル インジケーターを有効にしてください。

-  https://faq.nec-lavie.jp/qasearch/1007/app/servlet/relatedqa?QID=022081

また、config_personal.py 内の fc.use_ime_status_cursor_color 変数を True にしてください。

*** 10) Keyhac を起動する

keyhac.exe か keyhac.bat をダブルクリックすることで Keyhac を起動させてください。
keyhac.bat は keyhac.exe をプロセス優先度「HIGH」で起動させるためのバッチファイルです。
お好みにより、ご利用ください。また、Windows のスタートアップフォルダにショートカットファイルを
格納することで、PC 起動時に Keyhac を自動起動することができます。

keyhac.exe を起動すると、タスクバー（＾アイコンの中）に Keyhac のアイコンが表示されます。
必要に応じて、通知領域に表示するように調整してください。
このアイコンを左クリックするとコンソールが表示され、右クリックすると機能の一覧が表示されます。

*** 11) レジストリ LowLevelHooksTimeout の設定を行う

Fakeymacs を利用して、文字が二重に入力されたり、Keyhac のコンソールに「Time stamp inversion happened.」
と何度も表示される場合には、レジストリ HKEY_CURRENT_USER\Control Panel\Desktop\LowLevelHooksTimeout
をDWORD形式で作成し、そこに 10進数で 1000（ms の値）を設定して PC を再起動してください。
次のレジストリ設定ファイルを実行することでも設定可能です。
Windows 11 の場合、この設定は必須のように思われます。

- [[/fakeymacs_tools/LowLevelHooksTimeout.reg]]

この対応で状況はかなり改善すると思われますが、この設定により生ずる影響は分かっていませんので、
設定を行う場合は各自の責任でお願いします。（私はこの設定をしてかなりの期間利用していますが、
今のところ問題となるような事象は発生しておりません。）

- https://apollo440.hatenablog.com/entries/2010/12/21
- https://nazochu.blogspot.com/2011/08/windows7.html
- https://blogs.msdn.microsoft.com/alejacma/2010/10/14/global-hooks-getting-lost-on-windows-7/
- https://learn.microsoft.com/ja-jp/windows/win32/winmsg/lowlevelkeyboardproc

** 個人設定ファイル（config_personal.py）

_config_personal.py というファイルを config_personal.py というファイル名にすることで個人設定ファイル
として機能します。本ファイルの設定には [ ] で括られたセクション名が定義されており、その単位で config.py
の中に設定が取り込まれ、exec 関数により実行されます。
（何のセクションがどこで読み込まれるかについては、config.py ファイル内の exec 関数をコールしている
ところを検索して確認してください。）

config.py のコンフィグレーションパラメータ等の設定を変更したい内容は、config_personal.py に記載して
管理することで、config.py のバージョンアップに容易に対応できるようになります。
拡張機能も config_personal.py の中で有効化／無効化する設定を行う仕組みとしていますので、有効化する
場合は config_personal.py の設定を変更してください。
（config_personal.py の後半に拡張機能を設定する箇所があるので、有効化する場合には、if 0: を if 1: に
変更してください。）

** クロージャについて

Fakeymacs では、Python のクロージャの機能を多用しています。次のページを読むと、クロージャの理解が
深まり、Fakeymacs の設定も読みやすくなると思います。

- https://www.lifewithpython.com/2014/09/python-use-closures.html

** Windows Terminal の対応について

Windows Terminal では、複数の種類のターミナルをタブで個別に開くことができます。Fakeymacs では、
ウィンドウタイトルが変更されたイベントをキャッチすることにより、タブ毎に異なるキーバインドの
設定を実現しています。

なお、Windows Terminal で Ubuntu 等の Linux を利用する際は、設定 -> 二番目にある操作 メニューより、
「貼り付け」の Ctrl+v は削除しておかないと、Emacs や 以降で紹介する Midnight Commander での
スクロールアップが正常に動作しません。Ctrl+v を削除した場合でも、Ctrl+Shift+v が Windows の
クリップボードからの「貼り付け」として機能しますので、あまり困ることはないと思います。

** Microsoft Edit の対応について

Fakeymacs は Microsoft Edit に対応しています。Microsoft Edit は、ターミナルで起動すると、その
ターミナルのタイトルを「ファイル名 - edit」に置き換える機能をもっています。この機能により、
Fakeymacs がターミナルで Edit を起動中であることを認識することができ、Emacs キーバインドに
切り替えることができます。これは、Windows 版の Edit でも Linux 版の Edit でも同様に機能し、
さらには ssh で接続した先で Edit を起動した場合でも同様に機能します。

Linux 版の Edit は、次からダウンロードすることができます。一つのバイナリファイルとなって
いますので、これを edit や msedit というファイル名に置き換え、~/bin などのパスの通った
ディレクトリに格納すると、vim のようなエディタとして使うことができるようになります。

- https://github.com/microsoft/edit/releases

なお、Microsoft Edit を Windows Terminal で利用する場合は、設定 -> 操作 メニューより、
「貼り付けるときに末尾の空白を削除する」をオフに設定してください。
Microsoft Edit を使う際に改行を含む行のコピペが正しく機能するようになります。

** Midnight Commander の対応について

Midnight Commander は、Linux、Windows どちらでも動く、テキストベースのファイルマネージャ
です。Emacs like のキーバインドを持ち、ウィンドウタイトルを変更する機能ももっているので、
Windows Terminal などのターミナル上で Fakeymacs と共存して利用可能です。

- https://midnight-commander.org

Ubuntu で動かす場合は、sudo apt install mc でインストールが可能です。
Windows 版は以下からダウンロード可能です。

- https://github.com/adamyg/mcwin32

次のページに書かれている方法で、利用するエディタを先に紹介したMicrosoft Edit にすると、
シームレスに Emacs キーバインドの環境を利用することができます。

- https://hiroom2.jimdoweb.com/2015/09/06/midnight-commander%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/#sec-3-4

Midnight Commander の使い方は次のページに紹介されていますので、是非一度お試しください。

- https://bioinfo-dojo.net/2020/08/31/%e7%ab%af%e6%9c%ab%e7%94%a8-cui-%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%83%9e%e3%83%8d%e3%83%bc%e3%82%b8%e3%83%a3%e3%83%bc-midnight-commander-mc-%e4%bd%bf%e3%81%84%e6%96%b9-%e5%9f%ba%e6%9c%ac/

なお、ファンクションキーの無い 60% キーボードなどをお使いの場合は、以降に紹介している
space_fn 拡張機能を利用すると、Space+<数字キー> でファンクションキーが利用できるように
なるなど、操作性が良くなると思います。

また、config_personal.py の [section-base-2] セクションにある次の設定を有効にすると、
プレフィックスキーの Esc や C-x を使う際に IME を OFF にする機能が働き、使い勝手が
良くなると思います。

#+BEGIN_EXAMPLE
# キーを入力した後に、IME を OFF にする設定
define_key(keymap_base, "Esc", self_insert_command3("Esc"))
define_key(keymap_base, "C-[", self_insert_command3("C-["))
define_key(keymap_base, "C-x", self_insert_command3("C-x"))
#+END_EXAMPLE

** ウィンドウ操作の機能強化について

ウィンドウ操作については、次の拡張機能により、機能強化を図っています。

|------------------+----------------------------------|
| Extension name   | Description                      |
|------------------+----------------------------------|
| [[/fakeymacs_extensions/window_operation][window_operation]] | ウィンドウ操作のための設定を行う |
|------------------+----------------------------------|

** VSCode の機能強化について

VSCode については、次の拡張機能により、機能強化を図っています。

|----------------+-----------------------------|
| Extension name | Description                 |
|----------------+-----------------------------|
| [[/fakeymacs_extensions/vscode_key][vscode_key]]     | VSCode 用のキーの設定を行う |
|----------------+-----------------------------|

VSCode の Emacs Keymap Extension と比較した本機能の特徴は、次のページの *<2021/02/23 追記>*
の箇所に記載しています。参考としてください。

- https://w.atwiki.jp/ntemacs/pages/25.html

** Obsidian の機能強化について

Obsidian については、次の拡張機能により、機能強化を図っています。

|----------------+-------------------------------|
| Extension name | Description                   |
|----------------+-------------------------------|
| [[/fakeymacs_extensions/obsidian_key][obsidian_key]]   | Obsidian 用のキーの設定を行う |
|----------------+-------------------------------|

** SpaceFN のサポートについて

Fakeymacs は、次の拡張機能で SpaceFN の機能もサポートしています。

|----------------+------------------------------|
| Extension name | Description                  |
|----------------+------------------------------|
| [[/fakeymacs_extensions/space_fn][space_fn]]       | SpaceFN を実現する設定を行う |
|----------------+------------------------------|

本拡張機能の SpaceFN は、Space を Fn キーとして利用する際に発生する日本語入力時の変換漏れの問題や、
Ctrl+Space（set-mark-command）を入力する際に Space が Fn キーとして認識されてしまう問題を、
Fakeymacs 独自の方法で解決しています。
Emacs のキーバインドとも十分に共存が可能なものとなっていますので、一度お試しいただければと思います。

** CapsLock キーを Ctrl キーとして使う機能について

管理者権限を持たない PC を利用している場合でレジストリによるキーの置き換えができない場合のために、
CapsLock キーを Ctrl キーとして使うための機能を提供しています。

|----------------+-----------------------------------------------------|
| Extension name | Description                                         |
|----------------+-----------------------------------------------------|
| [[/fakeymacs_extensions/capslock_key][capslock_key]]   | CapsLock キーを Ctrl キーとして使うための設定を行う |
|----------------+-----------------------------------------------------|

使い方 1) のレジストリによる設定ができない場合の次善の策として、利用を検討ください。

** HHKB Studio のキーマップ設定例について

HHKB Studio で Fakeymacs を使う際の、キーマップの設定例について紹介しています。

- [[fakeymacs_manuals/HHKB_Studio_keymap_sample/README.org][HHKB Studio keymap sample]]

HHKB Studio は Fakeymacs と相性の良いキーボードなので、キーボードをお持ちの方は参考にして
いただければと思います。

** 留意事項

● Mouse without Borders というアプリを利用している場合、Ctrl+Shift+S というショートカットキーが
設定されています。このショートカットキーは、一般的な Windows アプリの「名前を付けて保存」機能の
ショートカットキーを上書きしてしまいます。Mouse without Borders アプリを利用している場合は、
アプリ側でこのショートカットキーを変更するか、無効にするなどの対策をお願いします。

- https://www.sriproot.net/blog/ctrl-shift-s-saveas-922

また、現在このアプリは PowerToys というアプリの「境界線のないマウス」という機能に統合されている
ようです。こちらの機能ではショートカットキーの見直しがされていますので、PowerToys への切り替えも
ご検討ください。

- https://learn.microsoft.com/ja-jp/windows/powertoys/mouse-without-borders

● Microsoft Excel や Word などの Office系アプリを使ってコピー＆ペーストをした際、「Ctrl」と表示
される「貼り付けオプション」ボタンが表示される場合があります。
この「貼り付けオプション」ボタンは、fc.side_of_ctrl_key 変数で指定している側の Ctrl キーではオープン
しないように対策していますので、「貼り付けオプション」ボタンを操作する場合は、fc.side_of_ctrl_key
変数で指定している側でない Ctrl キーを単押しするか、マウスを使って操作するようにしてください。
また、「貼り付けオプション」ボタンが不要な場合には、次のページの記載に従い、ボタンを表示しない設定
としてご利用ください。

- https://www.koikikukan.com/archives/2020/02/02-235555.php

● Keyhac のクリップボードリスト画面で migemo 検索を可能とするためには、辞書ファイルを登録する必要
があります。次のページに分かりやすく説明がされていますので、参考としてください。
（dictフォルダの中をすべてコピーするのではなく、dict/utf-8 の中のファイルをコピーするところが
ポイントです。また、migemo 検索するには、検索文字列の一文字目を大文字で指定する必要があります。）

- http://blog.livedoor.jp/ryman_trainee/archives/1042315792.html

● Logicool のマウス で SetPoint アプリによりキーストロークの割当を行った場合、Keyhac のフックを
OFF にしてから割当をしないと正常に動作しませんでした。他のキーストロークを設定するソフトの場合
にも同様の問題が発生する可能性があると思いますので、ご留意ください。
